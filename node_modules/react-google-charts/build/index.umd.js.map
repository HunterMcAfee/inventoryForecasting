{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["import { Component, createElement } from \"react\";\n\nconst DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n\nvar DEFAULT_COLORS = /*#__PURE__*/ Object.freeze({\n  DEFAULT_CHART_COLORS: DEFAULT_CHART_COLORS,\n  default: DEFAULT_CHART_COLORS\n});\n\nconst getGoogle = (windowAsArg = window) => {\n  if (typeof windowAsArg === \"undefined\") {\n    return {};\n  }\n  if (typeof windowAsArg.google === \"undefined\") {\n    throw new Error(\"google not in window object. Error in get-google-charts.\");\n  }\n  return windowAsArg.google;\n};\nconst getGoogleCharts = (windowAsArg = window) => {\n  if (typeof windowAsArg === \"undefined\") {\n    return {};\n  }\n  if (typeof windowAsArg.google === \"undefined\") {\n    throw new Error(\"google not in window object. Error in get-google-charts.\");\n  }\n  return windowAsArg.google.charts;\n};\n\nclass GoogleChartLoader {\n  constructor() {\n    this.isLoaded = false;\n    this.isLoading = false;\n    this.loadScript = null;\n    this.destroy = () => {\n      this.isLoading = false;\n      this.isLoaded = false;\n      this.loadScript = null;\n    };\n    this.init = (packages, version, language, mapsApiKey) => {\n      if ((this.isLoading || this.isLoaded) && this.loadScript !== null) {\n        return this.loadScript;\n      }\n      this.isLoading = true;\n      const script =\n        typeof window !== \"undefined\"\n          ? require(\"loadjs\")\n          : (link, { success: callback }) => callback();\n      this.loadScript = new Promise(resolve => {\n        script(\"https://www.gstatic.com/charts/loader.js\", {\n          success: () => {\n            const google_charts = getGoogleCharts(window);\n            google_charts.load(version || \"current\", {\n              packages: packages || [\"corechart\"],\n              language: language || \"en\",\n              mapsApiKey\n            });\n            google_charts.setOnLoadCallback(() => {\n              this.isLoaded = true;\n              this.isLoading = false;\n              resolve();\n            });\n          }\n        });\n      });\n      this.isLoading = true;\n      return this.loadScript;\n    };\n  }\n}\nconst googleChartLoader = new GoogleChartLoader();\n\nlet uniqueID = 0;\nconst generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.chart = null;\n    this.wrapper = null;\n    this.hidden_columns = {};\n    this.dataTable = [];\n    this.isUnmounted = false;\n    this.onResize = () => {\n      this.drawChart();\n    };\n    this.onSelectToggle = () => {\n      if (this.chart === null) return;\n      if (!this.props.legend_toggle) {\n        return;\n      }\n      const selection = this.chart.getSelection();\n      if (selection.length > 0) {\n        if (selection[0].row == null) {\n          const column = selection[0].column;\n          this.togglePoints(column);\n        }\n      }\n    };\n    this.getColumnColor = columnIndex => {\n      if (this.props.options && this.props.options.colors) {\n        if (this.props.options.colors[columnIndex]) {\n          return this.props.options.colors[columnIndex];\n        }\n      } else if (columnIndex in DEFAULT_COLORS) {\n        return DEFAULT_COLORS[columnIndex];\n      }\n      return DEFAULT_COLORS[0];\n    };\n    this.applyNumberFormat = (column, options) => {\n      const googlefromWindow = getGoogle(window);\n      const formatter = new googlefromWindow.visualization.NumberFormat(\n        options\n      );\n      formatter.format(this.dataTable, column);\n    };\n    this.applyDateFormat = (column, options) => {\n      const googlefromWindow = getGoogle(window);\n      const formatter = new googlefromWindow.visualization.DateFormat(options);\n      formatter.format(this.dataTable, column);\n    };\n    this.buildDataTableFromProps = () => {\n      const chartType = this.props.chartType;\n      const googlefromWindow = getGoogle(window);\n      if (this.props.diffdata && this.props.chartType !== null) {\n        const diffdata = this.props.diffdata;\n        const oldData = googlefromWindow.visualization.arrayToDataTable(\n          diffdata.old\n        );\n        const newData = googlefromWindow.visualization.arrayToDataTable(\n          diffdata.new\n        );\n        const computeDiff =\n          googlefromWindow.visualization[chartType].prototype.computeDiff;\n        const chartDiff = computeDiff(oldData, newData);\n        return chartDiff;\n      }\n      if (\n        this.props.data === null &&\n        (this.props.rows && this.props.rows.length === 0) &&\n        !this.props.allowEmptyRows === false\n      ) {\n        throw new Error(\n          \"Can't build DataTable from rows and columns: rows array in props is empty\"\n        );\n      } else if (\n        this.props.data === null &&\n        (this.props.columns && this.props.columns.length === 0)\n      ) {\n        throw new Error(\n          \"Can't build DataTable from rows and columns: columns array in props is empty\"\n        );\n      }\n      if (this.props.data !== null) {\n        try {\n          this.wrapper.setDataTable(this.props.data);\n          const dataTable = this.wrapper.getDataTable();\n          return dataTable;\n        } catch (err) {\n          throw new Error(\"Failed to set DataTable from data props ! \", err);\n        }\n      }\n      const dataTable = new window.google.visualization.DataTable();\n      this.props.columns.forEach(column => {\n        dataTable.addColumn(column);\n      });\n      dataTable.addRows(this.props.rows);\n      if (this.props.numberFormat) {\n        const { column, options } = this.props.numberFormat;\n        this.applyNumberFormat(column, options);\n      }\n      if (this.props.dateFormat) {\n        const { columns, options } = this.props.dateFormat;\n        columns.forEach(col => {\n          this.applyDateFormat(col, options);\n        });\n      }\n      this.props.formatters.forEach(({ type, column, options }) => {\n        switch (type) {\n          case \"NumberFormat\":\n            this.applyNumberFormat(column, options);\n            break;\n          case \"DateFormat\":\n            this.applyDateFormat(column, options);\n            break;\n          default:\n            console.log(`Unkown formatter type: ${type}`);\n            break;\n        }\n      });\n      return dataTable;\n    };\n    this.updateDataTable = () => {\n      window.google.visualization.errors.removeAll(\n        document.getElementById(this.wrapper.getContainerId())\n      );\n      this.dataTable.removeRows(0, this.dataTable.getNumberOfRows());\n      this.dataTable.removeColumns(0, this.dataTable.getNumberOfColumns());\n      this.dataTable = this.buildDataTableFromProps();\n      return this.dataTable;\n    };\n    this.drawChart = () => {\n      if (this.isUnmounted) {\n        return;\n      }\n      if (!this.wrapper) {\n        const chartConfig = {\n          chartType: this.props.chartType,\n          options: this.props.options,\n          containerId: this.state.graphID\n        };\n        this.wrapper = new window.google.visualization.ChartWrapper(\n          chartConfig\n        );\n        this.dataTable = this.buildDataTableFromProps();\n        this.wrapper.setDataTable(this.dataTable);\n        window.google.visualization.events.addOneTimeListener(\n          this.wrapper,\n          \"ready\",\n          () => {\n            this.chart = this.wrapper.getChart();\n            this.listenToChartEvents();\n            this.addChartActions();\n          }\n        );\n      } else {\n        this.updateDataTable();\n        this.wrapper.setDataTable(this.dataTable);\n        this.wrapper.setOptions(this.props.options);\n        if (this.wrapper.getChartType() !== this.props.chartType) {\n          window.google.visualization.events.removeAllListeners(this.wrapper);\n          this.wrapper.setChartType(this.props.chartType);\n          const self = this;\n          window.google.visualization.events.addOneTimeListener(\n            this.wrapper,\n            \"ready\",\n            () => {\n              self.chart = self.wrapper.getChart();\n              self.listenToChartEvents.call(self);\n            }\n          );\n        }\n      }\n      this.wrapper.draw();\n    };\n    this.addChartActions = () => {\n      if (this.props.chartActions === null) {\n        return;\n      }\n      this.props.chartActions.forEach(chartAction => {\n        this.chart.setAction({\n          id: chartAction.id,\n          text: chartAction.text,\n          action: chartAction.action.bind(this, this.chart)\n        });\n      });\n    };\n    this.listenToChartEvents = () => {\n      if (this.props.legend_toggle) {\n        window.google.visualization.events.addListener(\n          this.wrapper,\n          \"select\",\n          this.onSelectToggle\n        );\n      }\n      this.props.chartEvents.forEach(chartEvent => {\n        if (chartEvent.eventName === \"ready\") {\n          chartEvent.callback(this);\n        } else {\n          (event => {\n            window.google.visualization.events.addListener(\n              this.chart,\n              event.eventName,\n              e => {\n                event.callback(this, e);\n              }\n            );\n          })(chartEvent);\n        }\n      });\n    };\n    this.buildColumnFromSourceData = columnIndex => {\n      return {\n        label: this.dataTable.getColumnLabel(columnIndex),\n        type: this.dataTable.getColumnType(columnIndex),\n        sourceColumn: columnIndex,\n        role: this.dataTable.getColumnRole(columnIndex)\n      };\n    };\n    this.buildEmptyColumnFromSourceData = columnIndex => {\n      return {\n        label: this.dataTable.getColumnLabel(columnIndex),\n        type: this.dataTable.getColumnType(columnIndex),\n        calc: () => null,\n        role: this.dataTable.getColumnRole(columnIndex)\n      };\n    };\n    this.addEmptyColumnTo = (columns, columnIndex) => {\n      const emptyColumn = this.buildEmptyColumnFromSourceData(columnIndex);\n      columns.push(emptyColumn);\n    };\n    this.hideColumn = (colors, columnIndex) => {\n      if (!this.isHidden(columnIndex)) {\n        this.hidden_columns[columnIndex] = {\n          color: this.getColumnColor(columnIndex - 1)\n        };\n      }\n      colors.push(\"#CCCCCC\");\n    };\n    this.addSourceColumnTo = (columns, columnIndex) => {\n      const sourceColumn = this.buildColumnFromSourceData(columnIndex);\n      columns.push(sourceColumn);\n    };\n    this.isHidden = columnIndex => {\n      return this.hidden_columns[columnIndex] !== undefined;\n    };\n    this.restoreColorTo = (colors, columnIndex) => {\n      let previousColor;\n      if (this.isHidden(columnIndex)) {\n        previousColor = this.hidden_columns[columnIndex].color;\n        delete this.hidden_columns[columnIndex];\n      } else {\n        previousColor = this.getColumnColor(columnIndex - 1);\n      }\n      if (columnIndex !== 0) {\n        colors.push(previousColor);\n      }\n    };\n    this.debounce = (func, wait) => {\n      let timeout;\n      return function(...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n      };\n    };\n    this.togglePoints = column => {\n      const view = new window.google.visualization.DataView(\n        this.wrapper.getDataTable()\n      );\n      const columnCount = view.getNumberOfColumns();\n      let colors = [];\n      let columns = [];\n      for (let i = 0; i < columnCount; i += 1) {\n        if (i === 0) {\n          this.addSourceColumnTo(columns, i);\n        } else if (i === column) {\n          if (this.isHidden(i)) {\n            this.addSourceColumnTo(columns, i);\n            this.restoreColorTo(colors, i);\n          } else {\n            this.addEmptyColumnTo(columns, i);\n            this.hideColumn(colors, i);\n          }\n        } else if (this.isHidden(i)) {\n          this.addEmptyColumnTo(columns, i);\n          this.hideColumn(colors, i);\n        } else {\n          this.addSourceColumnTo(columns, i);\n          this.restoreColorTo(colors, i);\n        }\n      }\n      view.setColumns(columns);\n      this.props.options.colors = colors;\n      this.chart.draw(view, this.props.options);\n    };\n    this.state = { graphID: props.graph_id || generateUniqueID() };\n  }\n  componentDidMount() {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    if (this.props.loadCharts) {\n      googleChartLoader\n        .init(\n          this.props.chartPackages,\n          this.props.chartVersion,\n          this.props.chartLanguage,\n          this.props.mapsApiKey\n        )\n        .then(() => {\n          this.drawChart();\n          this.onResize = this.debounce(this.onResize, 200);\n          window.addEventListener(\"resize\", this.onResize);\n        });\n    } else {\n      this.drawChart();\n    }\n  }\n  componentDidUpdate() {\n    if (!this.props.loadCharts) {\n      this.drawChart();\n    } else if (googleChartLoader.isLoading) {\n      googleChartLoader.loadScript &&\n        googleChartLoader.loadScript.then(() => {\n          this.drawChart();\n        });\n    } else if (googleChartLoader.isLoaded) {\n      this.drawChart();\n    }\n  }\n  componentWillUnmount() {\n    this.isUnmounted = true;\n    googleChartLoader.destroy();\n    try {\n      if (window) {\n        if (window.google && window.google.visualization) {\n          window.google.visualization.events.removeAllListeners(this.wrapper);\n        }\n        window.removeEventListener(\"resize\", this.onResize);\n      }\n    } catch (err) {\n      return;\n    }\n  }\n  render() {\n    const divStyle = {\n      height: this.props.height || this.props.options.height,\n      width: this.props.width || this.props.options.width\n    };\n    return createElement(\n      \"div\",\n      { id: this.state.graphID, style: divStyle },\n      this.props.loader ? this.props.loader : \"Rendering Chart...\"\n    );\n  }\n}\nChart.defaultProps = {\n  chartType: \"LineChart\",\n  rows: [],\n  columns: [],\n  options: {\n    chart: {\n      title: \"Chart Title\",\n      subtitle: \"Subtitle\"\n    },\n    hAxis: { title: \"X Label\" },\n    vAxis: { title: \"Y Label\" },\n    width: \"100%\",\n    height: \"100%\"\n  },\n  width: \"400px\",\n  height: \"300px\",\n  chartEvents: [],\n  chartActions: null,\n  data: null,\n  legend_toggle: false,\n  allowEmptyRows: false,\n  loadCharts: true,\n  loader: createElement(\"div\", null, \"Rendering Chart\"),\n  chartPackages: [\"corechart\"],\n  chartVersion: \"current\",\n  chartLanguage: \"en\",\n  numberFormat: null,\n  dateFormat: null,\n  formatters: [],\n  diffdata: null\n};\n\nvar index = { Chart };\n\nexport default index;\nexport { Chart };\n"],"names":["const","DEFAULT_CHART_COLORS","DEFAULT_COLORS","Object","freeze","default","getGoogle","windowAsArg","window","google","Error","googleChartLoader","isLoaded","isLoading","loadScript","destroy","init","packages","version","language","mapsApiKey","this","script","require","link","ref","callback","Promise","resolve","google_charts","charts","getGoogleCharts","load","setOnLoadCallback","uniqueID","generateUniqueID","Chart","props","super","chart","wrapper","hidden_columns","dataTable","isUnmounted","onResize","drawChart","onSelectToggle","legend_toggle","selection","getSelection","length","row","togglePoints","column","getColumnColor","columnIndex","options","colors","applyNumberFormat","visualization","NumberFormat","format","applyDateFormat","DateFormat","buildDataTableFromProps","chartType","googlefromWindow","diffdata","oldData","arrayToDataTable","old","newData","new","computeDiff","prototype","data","rows","allowEmptyRows","columns","setDataTable","getDataTable","err","DataTable","forEach","addColumn","addRows","numberFormat","dateFormat","col","formatters","type","console","log","updateDataTable","errors","removeAll","document","getElementById","getContainerId","removeRows","getNumberOfRows","removeColumns","getNumberOfColumns","setOptions","getChartType","events","removeAllListeners","setChartType","self","addOneTimeListener","getChart","listenToChartEvents","call","ChartWrapper","containerId","state","graphID","addChartActions","draw","chartActions","chartAction","setAction","id","text","action","bind","addListener","chartEvents","chartEvent","event","eventName","e","buildColumnFromSourceData","label","getColumnLabel","getColumnType","sourceColumn","role","getColumnRole","buildEmptyColumnFromSourceData","calc","addEmptyColumnTo","emptyColumn","push","hideColumn","isHidden","color","addSourceColumnTo","undefined","restoreColorTo","let","previousColor","debounce","func","wait","timeout","context","clearTimeout","setTimeout","apply","args","view","DataView","columnCount","i","setColumns","graph_id","componentDidMount","loadCharts","chartPackages","chartVersion","chartLanguage","then","addEventListener","componentDidUpdate","componentWillUnmount","removeEventListener","render","createElement","style","height","width","loader","Component","defaultProps","title","subtitle","hAxis","vAxis"],"mappings":"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"}